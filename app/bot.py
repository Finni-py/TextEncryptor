import telebot
from telebot.types import Message
from telebot import types

from config import API_KEY
from text_fot_bot import *
from custom_encryption import get_random_funcs
from fernet_encryption import get_encrypt_text_fernet

bot = telebot.TeleBot(API_KEY)
commands = [
    types.BotCommand('start', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'),
    types.BotCommand('encrypt', '–®–∏—Ñ—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'),
    types.BotCommand('decrypt', '–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'),
    types.BotCommand('help', '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'),
    types.BotCommand('github', '–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞')
]


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/start'))
def start(message: Message) -> None:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    nickname = message.from_user.username
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    print(f'[+] {nickname} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton('/encrypt')
    button_2 = types.KeyboardButton('/decrypt')
    markup.add(button_1, button_2)

    bot.send_message(message.chat.id, start_text.format(user_name=user_name), reply_markup=markup)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/help'))
def help(message: Message) -> None:
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/github'))
def send_my_github(message: Message) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞
    bot.send_message(message.chat.id, github_link_text)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/encrypt'))
def encrypt(message: Message) -> None:
    bot.send_message(message.chat.id, encrypt_start_text)
    bot.register_next_step_handler(message, text_input_size)


def text_input_size(message: Message) -> None:
    try:
        size = int(message.text)
        if 1 <= size <= 3:
            bot.send_message(message.chat.id, encrypt_second_text)
            bot.register_next_step_handler(message, encrypt_input_info, size)
        else:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, '‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3')
        bot.register_next_step_handler(message, text_input_size)


def encrypt_input_info(message: Message, size: int = 2) -> None:
    encrypt_text_fernet, key_fernet = get_encrypt_text_fernet(message.text)
    encrypt_text_custom, key_custom = get_random_funcs((encrypt_text_fernet, key_fernet), size)
    bot.send_message(
        message.chat.id,
        f"üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç\n {encrypt_text_custom}\n\nüóù –ö–ª—é—á\n {key_custom}\n\n"
        "‚ö†Ô∏è –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ –Ω–∏–∫–æ–º—É!"
    )


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/decrypt'))
def decrypt(message: Message) -> None:
    bot.send_message(message.chat.id, '–§—É–Ω–∫—Ü–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞!')


def main():
    bot.set_my_commands(commands)
    bot.polling(none_stop=True)
