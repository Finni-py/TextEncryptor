import telebot
from telebot.types import Message
from telebot import types

from app.config import API_KEY
from app.text_fot_bot import *
from app.custom_decryption import get_stock_crypt
from app.custom_encryption import get_random_funcs
from app.fernet_encryption import get_encrypt_text_fernet, get_decrypt_text_fernet

bot = telebot.TeleBot(API_KEY)
commands = [
    types.BotCommand('start', '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'),  # –ö–æ–º–∞–Ω–¥–∞ /start
    types.BotCommand('encrypt', '–®–∏—Ñ—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'),  # –ö–æ–º–∞–Ω–¥–∞ /encrypt
    types.BotCommand('decrypt', '–†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'),  # –ö–æ–º–∞–Ω–¥–∞ /decrypt
    types.BotCommand('help', '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'),  # –ö–æ–º–∞–Ω–¥–∞ /help
    types.BotCommand('github', '–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞')  # –ö–æ–º–∞–Ω–¥–∞ /github
]


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/start'))
def start(message: Message) -> None:
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    nickname = message.from_user.username
    user_name = message.from_user.first_name or "–¥—Ä—É–≥"
    print(f'[+] {nickname} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_1 = types.KeyboardButton('/encrypt')
    button_2 = types.KeyboardButton('/decrypt')
    markup.add(button_1, button_2)

    bot.send_message(message.chat.id, start_text.format(user_name=user_name), reply_markup=markup)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/help'))
def help(message: Message) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    bot.send_message(message.chat.id, help_text)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/github'))
def send_my_github(message: Message) -> None:
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ GitHub –ø—Ä–æ–µ–∫—Ç–∞
    bot.send_message(message.chat.id, github_link_text)


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/encrypt'))
def encrypt(message: Message) -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    bot.send_message(message.chat.id, encrypt_start_text)
    bot.register_next_step_handler(message, text_input_size)


def text_input_size(message: Message) -> None:
    # –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    try:
        size = int(message.text)
        if 1 <= size <= 3:
            bot.send_message(message.chat.id, encrypt_second_text)
            bot.register_next_step_handler(message, encrypt_input_info, size)
        else:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, '‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3')
        bot.register_next_step_handler(message, text_input_size)


def encrypt_input_info(message: Message, size: int = 2) -> None:
    # –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, —à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ –¥–≤—É–º—è –º–µ—Ç–æ–¥–∞–º–∏ (fernet –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º), –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    encrypt_text_fernet, key_fernet = get_encrypt_text_fernet(message.text)
    encrypt_text_custom, key_custom = get_random_funcs((encrypt_text_fernet, key_fernet), size)
    bot.send_message(
        message.chat.id,
        f"üîê *–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n`{encrypt_text_custom}`\n\n"
        f"üóù *–ö–ª—é—á:*\n`{key_custom}`\n\n"
        "‚ö†Ô∏è *–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∫–æ–º—É!*",
        parse_mode="Markdown"
    )


@bot.message_handler(func=lambda m: m.text and m.text.lower().startswith('/decrypt'))
def decrypt(message: Message) -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    bot.send_message(message.chat.id, 'üîê –í–≤–µ–¥–∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
    bot.register_next_step_handler(message, decrypt_input_crypt)


def decrypt_input_crypt(message: Message) -> None:
    # –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–ª—é—á –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    decrypt_text = message.text.strip()
    bot.send_message(message.chat.id, 'üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–ª—é—á:')
    bot.register_next_step_handler(message, decrypt_input_key, decrypt_text)


def decrypt_input_key(message: Message, decrypt_text: str) -> None:
    # –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á, –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π)
    key = message.text.strip()
    if key[-1] != '=':
        decrypt_text_custom, key_custom = get_stock_crypt((decrypt_text, key))
    else:
        decrypt_text_custom, key_custom = decrypt_text, key
    decrypt_text_stock = get_decrypt_text_fernet(decrypt_text_custom, key_custom)

    if decrypt_text_stock.startswith("‚ùå"):
        bot.send_message(message.chat.id, decrypt_text_stock)  # –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
    else:
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n`{decrypt_text_stock}`",
            parse_mode="Markdown"  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        )


def main():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ –æ–ø—Ä–æ—Å Telegram API
    bot.set_my_commands(commands)
    bot.polling(none_stop=True)
