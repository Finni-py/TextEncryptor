from telebot.types import Message

from app.bot_instance import bot
from app.utils.custom_encryption import get_random_funcs
from app.utils.fernet_cryption import get_encrypt_text_fernet
from app.messages.message_text import ENCRYPT_SECOND_TEXT
from app.messages.message_text import NO_LEVEL


def work_with_input_size(message: Message) -> None:
    # –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    try:
        size = int(message.text)
        if 1 <= size <= 3:
            bot.send_message(message.chat.id, ENCRYPT_SECOND_TEXT)
            bot.register_next_step_handler(message, encrypt_input_info, size)
        else:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, NO_LEVEL)
        bot.register_next_step_handler(message, work_with_input_size)


def encrypt_input_info(message: Message, size: int = 2) -> None:
    # –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, —à–∏—Ñ—Ä—É–µ—Ç –µ–≥–æ –¥–≤—É–º—è –º–µ—Ç–æ–¥–∞–º–∏ (fernet –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–º), –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    encrypt_text_fernet, key_fernet = get_encrypt_text_fernet(message.text)
    encrypt_text_custom, key_custom = get_random_funcs((encrypt_text_fernet, key_fernet), size)
    bot.send_message(
        message.chat.id,
        f"üîê *–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n`{encrypt_text_custom}`\n\n"
        f"üóù *–ö–ª—é—á:*\n`{key_custom}`\n\n"
        "‚ö†Ô∏è *–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∫–æ–º—É!*",
        parse_mode="Markdown"
    )
